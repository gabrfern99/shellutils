#!/bin/bash


usage ()
{
    echo "Function ID - Function description"
    echo -e "\t1 - Old ext to new ext"
    echo -e "\t2 - Cut long file names"
    echo -e "\t-v  verbose"
    echo "$0 -d <Directory path> -f <Function ID>"
    exit 0
}
# RENAME MULTIPLE FILES IN DIR TO A COMMON EXTENSION
# *.JPG -> *.jpg
function old_to_new_ext()
{
	read -p "Current file extension: " frext
	read -p "To file extension: " toext

	frextfiles="$(find "$dir" -name "*.${frext}")"
	echo "$frextfiles" > /tmp/frextfiles
	n=0
	if [ ! -s "/tmp/frextfiles" ]; then
	    echo "No files to modify"
	    exit 1
	fi
	while IFS= read -r file; do
	    n=$((n+1))
	    mv "$file" "${file%.*}.${toext}"
	    if [ $verbose ]; then
		echo "File renamed: $file"
	    fi
	done < /tmp/frextfiles
	echo "Total files renamed: $n"
	rm /tmp/frextfiles
	exit 0
}
# Function that cut away part of a long file name
# and preserves extension
function cut_long_fname()
{

	find "$dir" -type f > /tmp/tmpfnames
	n=0
	while read -r fname; do
		fext="${fname##*.}"
		if [ "${#fname}" -gt 244 ]; then
			n=$((n+1))
			nfname=${fname:0:240}
			mv "$fname" "$nfname.$fext"
			if [ $verbose ]; then
			    echo "File renamed: $fname"
			fi
		else
			continue
		fi
	done < /tmp/tmpfnames

	echo ''
	echo "$n files renamed"
	rm /tmp/tmpfnames
	exit 0
}

[ $# -eq 0 ] && usage
while getopts "hvd:f:" arg; do
    case $arg in
	d)
	    dir="${OPTARG}"
	    ;;
	f)
	    funcid="${OPTARG}"
	    ;;
	v)
	    verbose=true
	    ;;
	h | *)
	    usage
	    ;;
    esac
done

[[ -z $dir || -z $funcid ]] && echo "No directory or function name specified" && exit 1
[[ ! -d $dir ]] && echo "$dir is not a directory" && exit 1
[[ $funcid != "1" && $funcid != "2" ]] && echo "No function with that name: $funcid" && exit 1
[[ $funcid == "1" ]] && old_to_new_ext
[[ $funcid == "2" ]] && cut_long_fname

    
